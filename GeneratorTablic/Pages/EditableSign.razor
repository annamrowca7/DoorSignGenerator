<!-- EditableSign.razor -->
@page "/editablesign"
@using GeneratorTablic.Data
@using BlazorSchool.Components.Web.UI
@using BlazorSchool.Components.Web.Variants
@using Newtonsoft.Json;
@inherits CreateSignBase;
@using Blazorise.Bootstrap;
@inject IJSRuntime JS;

<BlazorLibrary>
    <div class="container">
        <h3>Create Door Sign</h3>
        <!-- Dodaj formularz do tworzenia tabliczki -->
        <hr/>
        <h4> Logo Settings</h4>
        <div class="form-group row">
            <label for="logoPosition" class="col-sm-1 col-form-label">Logo Position</label>
            <div class="col-sm-2">
                <InputSelect id="logoPosition" class="form-control" @bind-Value="@RoomSign.LogoPosition.Alignment">
                    <option value="Left">Left</option>
                    <option value="Middle">Middle</option>
                    <option value="Right">Right</option>
                </InputSelect>
            </div>
            <label for="logoPositionSize" class="col-sm-1 col-form-label">Logo Size</label>
            <div class="col-sm-2">
                <InputNumber id="logoPositionSize" class="form-control" placeholder="Logo Size" @bind-Value="@RoomSign.LogoPosition.Size" min="400" max="800"/>
            </div>
        </div>
        <h4> Room Number Settings</h4>
        <div class="form-group row">
            <label for="roomNumber" class="col-sm-2 col-form-label">Room Number</label>
            <div class="col-sm-2">
                <InputText id="roomNumber" class="form-control" placeholder="Room Number" @bind-Value="RoomSign.RoomNumber"/>
            </div>

            <label for="roomNumberFontSize" class="col-sm-1 col-form-label">Font Size</label>
            <div class="col-sm-2">
                <InputNumber id="roomNumberFontSize" class="form-control" placeholder="Room Number Font Size" @bind-Value="RoomSign.RoomNumberFont.Size"/>
            </div>

            <label for="color" class="col-sm-1 col-form-label">Font Color</label>
            <div class="col-sm-1">
                <input type="color" id="roomNumberFontColor" @bind="RoomSign.RoomNumberFont.Color"/>
            </div>

            <label for="fontSelect" class="col-sm-1 col-form-label">Font</label>
            <div class="col-sm-2">
                <select id="fontSelect" class="form-control" @bind="RoomSign.RoomNumberFont.FontName">
                    @foreach (var availableFont in AvailableFonts)
                    {
                        <option style="font-family: @availableFont;" value="@availableFont">@availableFont</option>
                    }
                </select>
            </div>
        </div>
        <h4> People Managment</h4>
        <div class="form-group row">
            <label for="roomNumberFontSize" class="col-sm-1 col-form-label">Font Size</label>
            <div class="col-sm-2">
                <InputNumber id="roomNumberFontSize" class="form-control" placeholder="Room Number Font Size" @bind-Value="RoomSign.PersonNameFont.Size"/>
            </div>
        
            <label for="color" class="col-sm-1 col-form-label">Font Color</label>
            <div class="col-sm-1">
                <input type="color" id="roomNumberFontColor" @bind="RoomSign.PersonNameFont.Color"/>
            </div>
        
            <label for="fontSelect" class="col-sm-1 col-form-label">Font</label>
            <div class="col-sm-2">
                <select id="fontSelect" class="form-control" @bind="RoomSign.PersonNameFont.FontName">
                    @foreach (var availableFont in AvailableFonts)
                    {
                        <option style="font-family: @availableFont;" value="@availableFont">@availableFont</option>
                    }
                </select>
            </div>
        </div>
        <!-- Dodaj inne pola formularza, takie jak osoby przydzielone do gabinetu -->
        <div class="form-group row">
            <label for="assignedPeople" class="col-sm-2 col-form-label">Assigned People</label>
            <div class="row mb-2">
                <div class="col-4">
                    <input class="form-control" placeholder="Name" @bind="TempPerson.Name"/>
                </div>
                <div class="col-4">
                    <input class="form-control" placeholder="Position" @bind="TempPerson.Position"/>
                </div>
                <div class="col-sm-2">
                    <button type="button" class="btn btn-info" @onclick="AddPerson">+</button>
                </div>
            </div>
        </div>
        @* tu dodac ustawiaani koloru i rozmiaru tej sekcji i upiekszyc to - moge to zrobic wczoraj juz nmei zdazylam *@
        <div class="form-group row">
            <div class="col-sm-10 offset-sm-2">
                @foreach (var person in RoomSign.AssignedPeople)
                {
                    <div class="row mb-2">
                        <div class="col-4">
                            <input class="form-control" placeholder="Name" @bind="person.Name"/>
                        </div>
                        <div class="col-4">
                            <input class="form-control" placeholder="Position" @bind="person.Position"/>
                        </div>
                        <div class="col-2">
                            <button type="button" class="btn btn-danger" @onclick="() => RemovePerson(person)">-</button>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="col-4">
            <label for="fileInput">Choose a File:</label>
            <InputFile OnChange="@LoadFile" multiple/>
        </div>
        <div class="col-4">
            <label for="fileInput">Choose a File Name:</label>
            <InputText placeholder="File Name" @bind-Value="RoomSign.FileName"/>
        </div>
        
        <div class="form-group row">
            <div class="grid">
                <button type="submit" class="btn btn-primary mr-2" @onclick="SaveAsJson">Create Sign</button>
                <BlazorCapturePdfButton Variants="new[] { BaseVariants.Primary }" TargetToken="Form" class="flex-fill">Save As Pdf</BlazorCapturePdfButton>
                <button type="submit" class="btn btn-primary mr-2" @onclick="SubmitFile">Load File</button>
            </div>
        </div>

        
        <BlazorCaptureElement Token="Form" class="flex-fill">
            <div class="form-group" style="margin-bottom: 150px">
                <div class="sign-preview" style="@PreviewStyle">
                        @if (!string.IsNullOrWhiteSpace(RoomSign.LogoPath))
                        {
                            <img src="@RoomSign.LogoPath" alt="Logo" style="@LogoPreviewStyle"/>
                        }
                        <div>
                        <h2 style="@RoomNumberPreviewStyle">@RoomSign.RoomNumber</h2>
                    </div>
                </div>

                <div class="people-container">
                    @foreach (var person in RoomSign.AssignedPeople)
                    {
                        <div class="person-preview">
                            <p>
                                <h2 style="@PersonNamePreviewStyle ">
                                    @person.Position @person.Name
                                </h2>
                            </p>
                        </div>
                    }
                </div>
            </div>
        </BlazorCaptureElement>
    </div>
</BlazorLibrary>

@code {
    private byte[] pdfPreview;
    private List<string> AvailableFonts = new List<string> { "Arial", "Times New Roman", "Verdana", "Courier New", "Comic Sans MS" };
    private IBrowserFile loadedFile;
    private Person TempPerson { get; set; } = new Person();
    private RoomSign data;

    private void AddPerson()
    {
        if (TempPerson != null)
        {
            RoomSign.AssignedPeople.Add(TempPerson);

            TempPerson = new Person();
        }
    }

    private void RemovePerson(Person person)
    {
        RoomSign.AssignedPeople.Remove(person);
    }
    
    private bool isLoading;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        
            var file = e.File;
            loadedFile = file;

        isLoading = false;
    }
    
    private async Task SubmitFile()
    {
        if (loadedFile != null)
        {
            using (var reader = loadedFile.OpenReadStream())
            {
                var jsonString = await new StreamReader(reader).ReadToEndAsync();
                RoomSign = JsonConvert.DeserializeObject<RoomSign>(jsonString);
            }
        }
    }
    
    private async Task SaveAsJson()
    {
        if (!string.IsNullOrWhiteSpace(RoomSign.FileName))
        {
            string json = JsonConvert.SerializeObject(RoomSign);

            var jsRuntime = JS;

            await jsRuntime.InvokeVoidAsync("saveAsFile", $"{RoomSign.FileName}.json", json, "application/json");
        }
    }
    
    private string LogoPreviewStyle
    {
        get
        {
            switch (RoomSign.LogoPosition.Alignment)
            {
                case PositionAlignment.Left:
                    return $"width: {RoomSign.LogoPosition.Size}px; float: left;";
                case PositionAlignment.Middle:
                    return $"width: {RoomSign.LogoPosition.Size}px; float:middle;";
                case PositionAlignment.Right:
                    return $"width: {RoomSign.LogoPosition.Size}px; float: right;";
                default:
                    return $"width: {RoomSign.LogoPosition.Size}px; float: left;";
            }
        }
    }
    
    private string PreviewStyle
    {
        get
        {
            switch (RoomSign.LogoPosition.Alignment)
            {
                case PositionAlignment.Left:
                    return "display: flex; justify-content: flex-start; align-items: center; margin-top: 80px; margin-bottom: 80px;";
                case PositionAlignment.Middle:
                    return "display: flex; justify-content: center; align-items: center; margin-top: 80px; margin-bottom: 80px;";
                case PositionAlignment.Right:
                    return "display: flex; justify-content: flex-end; align-items: center; margin-top: 80px; margin-bottom: 80px;";
                default:
                    return "display: flex; justify-content: flex-start; align-items: center; margin-top: 80px; margin-bottom: 80px;";
            }
        }
    }

    private string RoomNumberPreviewStyle => $"font-size: {RoomSign.RoomNumberFont.Size}px; color: {RoomSign.RoomNumberFont.Color}; font-family: {RoomSign.RoomNumberFont.FontName}";
    private string PersonNamePreviewStyle => $"font-size: {RoomSign.PersonNameFont.Size}px; color: {RoomSign.PersonNameFont.Color}; font-family: {RoomSign.PersonNameFont.FontName}";
}